{
	"info": {
		"_postman_id": "57411ddb-a303-4a06-b6b6-04a2f2b5df25",
		"name": "!OAUTH2 Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1858785"
	},
	"item": [
		{
			"name": "Clients",
			"item": [
				{
					"name": "Tests",
					"item": [
						{
							"name": "Client Create 201",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save data to environment\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"var id = jsonData.id;\r",
											"var secret = jsonData.secret;\r",
											"\r",
											"pm.environment.set(\"TEST_CLIENT_ID\", id);\r",
											"pm.environment.set(\"TEST_CLIENT_SECRET\", secret);\r",
											"\r",
											"// tests\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct JSON structure\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"    pm.expect(jsonData).to.have.property(\"secret\");\r",
											"    pm.expect(jsonData).to.have.property(\"scopes\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomWord}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/clients",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Client Create 422",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Field validation for 'Name' failed on the 'required' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{ROOT_CLIENT_SECRET}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{ROOT_CLIENT_ID}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/clients",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Tests",
					"item": [
						{
							"name": "User Create 201",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomString = (length) => [...Array(length)].map(() => String.fromCharCode(Math.floor(Math.random() * 26) + 97)).join('');\r",
											"\r",
											"pm.environment.set(\"TEST_USER_USERNAME\", randomString(20));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save data to environment\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"TEST_USER_USERNAME\", jsonData.username);\r",
											"pm.environment.set(\"TEST_USER_ID\", jsonData.id);\r",
											"\r",
											"// tests\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct JSON structure\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"    pm.expect(jsonData).to.have.property(\"external_id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{TEST_USER_USERNAME}}\",\r\n    \"password\": \"{{TEST_USER_PASSWORD}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/users",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Create 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// tests\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains error message Username\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Field validation for 'Username' failed on the 'required' tag\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains error message Password\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Field validation for 'Password' failed on the 'required' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/users",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Update 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct JSON structure\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"    pm.expect(jsonData).to.have.property(\"external_id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomString = (length) => [...Array(length)].map(() => String.fromCharCode(Math.floor(Math.random() * 26) + 97)).join('');\r",
											"\r",
											"pm.environment.set(\"TEST_USER_PASSWORD\", randomString(20));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"{{TEST_USER_PASSWORD}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/users/{{TEST_USER_ID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"users",
										"{{TEST_USER_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{TEST_CLIENT_SECRET}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{TEST_CLIENT_ID}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Oauth",
			"item": [
				{
					"name": "Tests",
					"item": [
						{
							"name": "Token create 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save data to environment\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"TEST_ACCESS_TOKEN\", jsonData.access_token);\r",
											"pm.environment.set(\"TEST_REFRESH_TOKEN\", jsonData.refresh_token);\r",
											"\r",
											"// tests\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct JSON structure\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
											"    pm.expect(jsonData).to.have.property(\"refresh_token\");\r",
											"    pm.expect(jsonData).to.have.property(\"token_type\");\r",
											"    pm.expect(jsonData).to.have.property(\"expires_in\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grant_type\": \"password\",\r\n    \"client_id\": \"{{TEST_CLIENT_ID}}\",\r\n    \"secret\": \"{{TEST_CLIENT_SECRET}}\",\r\n    \"username\": \"{{TEST_USER_USERNAME}}\",\r\n    \"password\": \"{{TEST_USER_PASSWORD}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/oauth/token",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Token refresh 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save data to environment\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"TEST_ACCESS_TOKEN\", jsonData.access_token);\r",
											"pm.environment.set(\"TEST_REFRESH_TOKEN\", jsonData.refresh_token);\r",
											"\r",
											"// tests\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct JSON structure\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
											"    pm.expect(jsonData).to.have.property(\"refresh_token\");\r",
											"    pm.expect(jsonData).to.have.property(\"token_type\");\r",
											"    pm.expect(jsonData).to.have.property(\"expires_in\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grant_type\": \"refresh_token\",\r\n    \"client_id\": \"{{TEST_CLIENT_ID}}\",\r\n    \"secret\": \"{{TEST_CLIENT_SECRET}}\",\r\n    \"refresh_token\": \"{{TEST_REFRESH_TOKEN}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/oauth/token/refresh",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"oauth",
										"token",
										"refresh"
									]
								}
							},
							"response": []
						},
						{
							"name": "Token validate 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// tests\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TEST_ACCESS_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/oauth/token/validate",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"oauth",
										"token",
										"validate"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{TEST_CLIENT_SECRET}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{TEST_CLIENT_ID}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{ROOT_CLIENT_SECRET}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{ROOT_CLIENT_ID}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}